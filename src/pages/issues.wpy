<style lang='scss'>
.container {
  width: 100%;
  box-sizing: border-box;

  .issues-filter {
    padding: 24rpx 32rpx;
    font-size: 32rpx;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    justify-content: space-between;
    background-color: white;
    box-shadow: 2rpx 2rpx 10rpx #cccccc;
    width: 100%;
    box-sizing: border-box;
    position: fixed;
    top: 0;
    left: 0;

    .issue-title {
      font-weight: bold;
      display: flex;
      flex-flow: column;
      align-items: flex-start;

      .project-name {
        font-size: 26rpx;
        color: #6b6b6b;
      }
    }

    .filter-image {
      flex-shrink: 1;
      width: 48rpx;
      height: 48rpx;
    }
  }

  .filters-wrapper {

    .filters-bg {
      position: fixed;
      top: 128rpx;
      left: 0;
      z-index: 1;
      opacity: 0.8;
      width: 100vw;
      height: 100vh;
      box-sizing: border-box;
      background-color: #e3e3e3;
    }

    .filters {
      font-size: 28rpx;
      display: flex;
      flex-flow: column nowrap;
      background-color: white;
      box-shadow: 0 4rpx 10rpx -4rpx #cccccc;
      width: 100%;
      box-sizing: border-box;
      padding: 0 32rpx;
      position: fixed;
      top: 128rpx;
      left: 0;
      z-index: 10;

      .filter-item {
        padding: 32rpx 0;
        display: flex;
        flex-flow: column nowrap;

        .top {
          display: flex;
          flex-flow: row nowrap;
          align-items: center;
          justify-content: space-between;
          margin-bottom: 20rpx;

          .selected-count {
            height: 40rpx;
            border-radius: 20rpx;
            background-color: #292961;
            color: white;
            font-size: 24rpx;
            padding: 0 16rpx;
            line-height: 40rpx;
          }
        }

        .bottom {
          .label-item {
            height: 40rpx;
            font-size: 24rpx;
            line-height: 38rpx;
            padding: 0 16rpx;
            border: 1px solid #292961;
            color: #292961;
            display: inline-block;
            border-radius: 20rpx;
            margin-right: 10rpx;
            margin-bottom: 10rpx;
            line-height: 40rpx;

            &.selected {
              background-color: #292961;
              color: white;
            }
          }
        }
      }

      .buttons {
        padding-bottom: 32rpx;

        .confirm-button {
          display: flex;
          align-items: center;
          justify-content: center;
          border: 1px solid #292961;
          height: 60rpx;
          font-size: 28rpx;
          color: #292961;
        }
      }
    }
  }

  .issues-list {
    padding: 0 32rpx;
    font-size: 28rpx;
    margin-top: 140rpx;

    .issue-item-wrapper {
      width: 100%;
      display: flex;
      flex-flow: row nowrap;
      align-items: flex-start;
    }
  }

  .none-default-proj,
  .set-default-proj {
    margin-top: 160rpx;
    text-align: center;
    width: 100%;
    color: #6b6b6b;
    font-size: 28rpx;
    box-sizing: border-box;
  }

  .set-default-proj {
    .browse-project-button {
      border: 1px solid #292961;
      background-color: #292961;
      color: white;
    }
  }

  .no-more {
    margin: 30rpx 0;
    color: #6b6b6b;
    font-size: 28rpx;
    text-align: center;
    box-sizing: border-box;
    width: 100%;
    padding-right: 32rpx;
  }
}
</style>
<template>
<view class="container">
  <view wx:if="{{ noneDefaultProject }}">
    <view class="none-default-proj">{{ lang.noneProj }}</view>
    <view class="set-default-proj">
      <button class="browse-project-button" size="mini" plain="true" @tap.stop="browseProject">{{ lang.browseProject }}</button>
    </view>
  </view>
  <view wx:else>
    <view class="issues-filter" @tap.stop="toggleFilters">
      <view class="issue-title">
        <view class="count">
          {{ lang.title }} <text wx:if="{{ issuesCount > 0 }}"> Â· {{ issuesCount }}</text>
        </view>
        <view class="project-name">{{ project.name_with_namespace }}</view>
      </view>
      <image class="filter-image" src="/images/options.png"></image>
    </view>
    <view class="filters-wrapper" wx:if="{{ filtersOn }}" catchtouchmove="ture">
      <view class="filters-bg" @tap.stop="toggleFilters"></view>
      <view class="filters">
        <view class="filter-item label-filter">
          <view class="top">
            {{ lang.labelFilter }}
            <text class="selected-count" wx:if="{{ filters.labels.length > 0 }}">{{ filters.labels.length }}</text>
          </view>
          <view class="bottom">
            <repeat for="{{ project.labels }}" key="labelIndex" index="labelIndex" item="label">
              <view class="label-item {{ label.selected ? 'selected' : '' }}" @tap.stop="toggleLabel({{ label }})">{{ label.name }}</view>
            </repeat>
          </view>
        </view>
        <view class="buttons">
          <button plain="true" class="confirm-button" @tap.stop="applyFilters">{{ lang.confirm }}</button>
        </view>
      </view>
    </view>
    <view wx:if="{{ issues.length === 0 }}">
      <view class="none-default-proj">{{ lang.noneIssues }}</view>
    </view>
    <view wx:else>
      <view class="issues-list" wx:if="{{ mode === 'list' }}">
        <repeat for="{{ issues }}" key="index" index="index" item="item">
          <navigator url="/issues/detail?pid={{ project.id }}&&issue_iid={{ item.iid }}" hover-class="none">
            <view class="issue-item-wrapper">
              <issueListItem :item.sync="item"></issueListItem>
            </view>
          </navigator>
        </repeat>
      </view>
      <view class="no-more" wx:if="{{ issues.length > 0 && noMore }}">{{ lang.noMore }}</view>
    </view>
  </view>
</view>
</template>
<script>
import wepy from 'wepy'
import * as _ from 'lodash'
import moment from 'moment'
import BasePage from './base'
import { isEmpty, extend } from '../utils/validate'
import IssueListItem from '../components/issueListItem'
import IssuesService from '../services/issues'
export default class IssuesPage extends BasePage {
  data = {
    mode: 'list', // list or board
    project: {},
    issues: [],
    logined: false,
    issuesCount: 0,
    noneDefaultProject: false,
    checkLoad: false,
    changedProject: false,
    filtersOn: false,
    filters: {
      labels: []
    },
    ...this.def
  }

  config = {
    enablePullDownRefresh: true
  }

  components = {
    issueListItem: IssueListItem
  }

  async onLoad() {
    await this.userLogin()
    this.hasPagination = true
    this.project = wepy.getStorageSync('DEFAULT_PROJECT')
    this.noneDefaultProject = !this.project.id
    this.logined = this.checkLoginStatus()
    this.extraParams = {
      pid: this.project.id,
      page: 1,
      per_page: 50
    }
    await this.fetchData()
    this.setLang()
    this.loaded()
  }

  onShow() {
    let project = wepy.getStorageSync('DEFAULT_PROJECT')
    this.checkLoad = this.logined !== this.checkLoginStatus()
    this.changedProject = this.project.id !== project.id
    this.project = project
    this.noneDefaultProject = !this.project.id
    this.logined = this.checkLoginStatus()
  }

  async onPullDownRefresh() {
    this.issues = []
    this.issuesCount = 0
    this.extraParams = {
      pid: this.project.id,
      page: 1,
      per_page: 50
    }
    await this.fetchData()
    wx.stopPullDownRefresh()
    this.loaded()
  }

  async onTabItemTap(e) {
    if (this.checkLoad || this.changedProject) {
      await this.fetchData()
      this.loaded()
    }
  }

  async fetchData() {
    if (this.logined && !this.noneDefaultProject) {
      let issuesServiceFn = IssuesService.getProjectIssues.bind(IssuesService)
      let [issues, issuesCount] = await this.loadData(issuesServiceFn, this.extraParams, this.mapIssues, this, this.issues)
      this.issues = issues
      this.issuesCount = issuesCount
    }
  }

  mapIssues(item) {
    const t = wepy.i18n.translate
    item.created = t('issues-created-at', {
      date: moment(item.created_at).fromNow()
    })
    // console.log(this.project)
    if (this.project.labels) {
      item.labels = item.labels.map((label) => {
        return this.project.labels[label] || {}
      })
    }
    return item
  }

  setLang() {
    const t = wepy.i18n.translate
    this.lang.noneProj = t('issues-none-proj')
    this.lang.noneIssues = t('issues-none-issues')
    this.lang.noMore = t('common-no-more')
    this.lang.browseProject = t('issues-browse-project')
    this.lang.title = t('issues-title')
    this.lang.labelFilter = t('issues-label-filter')
    this.lang.confirm = t('common-confirm')
    this.$apply()
  }

  async onReachBottom() {
    if (!this.noMore) {
      let params = extend(this.extraParams, {
        page: this.nextPage
      })
      let issuesServiceFn = IssuesService.getProjectIssues.bind(IssuesService)
      let [issues, issuesCount] = await this.loadData(issuesServiceFn, params, this.mapIssues, this, this.issues)
      this.issues = issues
      this.issuesCount = issuesCount
    }
    this.loaded()
  }

  methods = {
    browseProject() {
      wepy.switchTab({
        url: 'index'
      })
    },
    toggleFilters() {
      if (this.checkLoginStatus()) {
        this.filtersOn = !this.filtersOn
        this.$apply()
      }
    },
    toggleLabel(label) {
      let lb = this.project.labels[label.name]
      if (!isEmpty(lb)) {
        lb.selected = !lb.selected
      }
      this.filters.labels = _
        .chain(this.project.labels)
        .filter((item) => item.selected)
        .map((item) => item.name)
        .value()
      this.$apply()
    },
    async applyFilters() {
      this.filtersOn = false
      this.issues = []
      this.issuesCount = 0
      this.extraParams = {
        pid: this.project.id,
        page: 1,
        per_page: 50
      }
      if (this.filters.labels.length > 0) {
        this.extraParams['labels'] = this.filters.labels.join(',')
      } else {
        delete this.extraParams.labels
      }
      await this.fetchData()
      this.loaded()
    }
  }
}
</script>
