<style lang='scss'>
.container {
  width: 100%;
  box-sizing: border-box;

  .issues-filter {
    padding: 24rpx 32rpx;
    font-size: 32rpx;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    justify-content: space-between;
    background-color: white;
    box-shadow: 2rpx 2rpx 10rpx #cccccc;
    width: 100%;
    box-sizing: border-box;
    position: fixed;
    top: 0;
    left: 0;

    .project-name {
      font-weight: bold;
    }

    .filter-image {
      flex-shrink: 1;
      width: 48rpx;
      height: 48rpx;
    }
  }

  .issues-list {
    padding: 0 32rpx;
    font-size: 28rpx;
    margin-top: 120rpx;

    .issue-item-wrapper {
      width: 100%;
      display: flex;
      flex-flow: row nowrap;
      align-items: flex-start;
    }
  }

  .none-default-proj,
  .set-default-proj {
    margin-top: 60rpx;
    text-align: center;
    width: 100%;
    color: #6b6b6b;
    font-size: 28rpx;
    box-sizing: border-box;
  }

  .set-default-proj {
    .browse-project-button {
      border: 1px solid #292961;
      background-color: #292961;
      color: white;
    }
  }

  .no-more {
    margin: 30rpx 0;
    color: #6b6b6b;
    font-size: 28rpx;
    text-align: center;
    box-sizing: border-box;
    width: 100%;
    padding-right: 32rpx;
  }
}
</style>
<template>
<view class="container">
  <view wx:if="{{ noneDefaultProject }}">
    <view class="none-default-proj">{{ lang.noneProj }}</view>
    <view class="set-default-proj">
      <button class="browse-project-button" size="mini" plain="true" @tap.stop="browseProject">{{ lang.browseProject }}</button>
    </view>
  </view>
  <view wx:if="{{ !noneDefaultProject && issues.length > 0 }}">
    <view class="issues-filter" >
      <view class="project-name">{{ lang.title }} <text wx:if="{{ issuesCount > 0 }}"> Â· {{ issuesCount }}</text></view>
      <image class="filter-image" src="/images/options.png"></image>
    </view>
    <view class="issues-list" wx:if="{{ mode === 'list' }}">
      <repeat for="{{ issues }}" key="index" index="index" item="item">
        <view class="issue-item-wrapper">
          <issueListItem :item.sync="item"></issueListItem>
        </view>
      </repeat>
    </view>
    <view class="no-more" wx:if="{{ issues.length > 0 && noMore }}">{{ lang.noMore }}</view>
  </view>
</view>
</template>
<script>
import wepy from 'wepy'
import moment from 'moment'
import BasePage from './base'
import { isEmpty, extend } from '../utils/validate'
import IssueListItem from '../components/issueListItem'
import IssuesService from '../services/issues'
export default class IssuesPage extends BasePage {
  data = {
    mode: 'list', // list or board
    project: {},
    issues: [],
    logined: false,
    issuesCount: 0,
    noneDefaultProject: false,
    ...this.def
  }

  components = {
    issueListItem: IssueListItem
  }

  async onLoad() {
    await this.userLogin()
    this.hasPagination = true
    this.project = wepy.getStorageSync('DEFAULT_PROJECT')
    this.noneDefaultProject = !this.project.id
    this.logined = this.checkLoginStatus()
    await this.fetchData()
    this.setLang()
    this.loaded()
  }

  onShow() {
    this.project = wepy.getStorageSync('DEFAULT_PROJECT')
    this.noneDefaultProject = !this.project.id
    this.logined = this.checkLoginStatus()
  }

  async fetchData() {
    if (this.logined && !this.noneDefaultProject) {
      let issuesOptions = {
        pid: this.project.id,
        page: 1,
        per_page: 20
      }
      this.extraParams = issuesOptions
      let issuesServiceFn = IssuesService.getProjectIssues.bind(IssuesService)
      let [[issues, issuesCount]] = await this.loadData(issuesServiceFn, this.extraParams, this.mapIssues, this.issues)
      this.issues = issues
      this.issuesCount = issuesCount
    }
  }

  mapIssues(item) {
    const t = wepy.i18n.translate
    item.created = t('issues-created-at', {
      date: moment(item.created_at).fromNow()
    })
    return item
  }

  setLang() {
    const t = wepy.i18n.translate
    this.lang.noneProj = t('issues-none-proj')
    this.lang.noMore = t('common-no-more')
    this.lang.browseProject = t('issues-browse-project')
    if (!isEmpty(this.project)) {
      this.lang.title = t('issues-title', {
        project: this.project.name_with_namespace
      })
    }
    this.$apply()
  }

  async onReachBottom() {
    if (!this.noMore) {
      let params = extend(this.extraParams, {
        page: this.nextPage
      })
      let issuesServiceFn = IssuesService.getProjectIssues.bind(IssuesService)
      let [issues, issuesCount] = await this.loadData(issuesServiceFn, params, this.mapIssues, this.issues)
      this.issues = issues
      this.issuesCount = issuesCount
    }
    this.loaded()
  }

  methods = {
    browseProject() {
      wepy.switchTab({
        url: 'index'
      })
    }
  }

  events = {
    'user-logined': async (user) => {
      if (!isEmpty(user)) {
        this.currentUser = user
        this.loaded()
      }
    }
  }
}
</script>
