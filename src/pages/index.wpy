<style lang='scss'>
.container {
  width: 100%;
  box-sizing: border-box;

  .projects-filter {
    width: 100%;
    height: 100rpx;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    justify-content: center;
    font-size: 28rpx;
    padding-right: 32rpx;
    position: fixed;
    top: 16rpx;
    left: 0;

    .filter {
      flex-shrink: 1;
      text-align: center;
      border: 1px solid #cccccc;
      padding: 10rpx 20rpx;
      color: #4b4b4b;
      background-color: white;
      box-shadow: 2rpx 2rpx 10rpx #cccccc;

      &.active {
        background-color: #292961;
        border-color: #292961;
        color: white;
      }
    }

    .your-projects {
      border-radius: 8rpx 0 0 8rpx;
      border-right: none;
    }

    .starred-projects {
      border-radius: 0 8rpx 8rpx 0;
      border-left: none;
    }
  }

  .projects-lists {
    margin-top: 140rpx;
    padding: 0 32rpx;

    .project-index-item-wrapper {
      width: 100%;
      display: flex;
      flex-flow: row nowrap;
      align-items: flex-start;
      padding: 24rpx 0;
    }
  }

  .no-more {
    margin: 30rpx 0;
    color: #6b6b6b;
    font-size: 28rpx;
    text-align: center;
    box-sizing: border-box;
    width: 100%;
    padding-right: 32rpx;
  }
}
</style>
<template>
<loginModal wx:if="{{ !currentUser || !currentUser.id }}"></loginModal>
<view class="container" wx:else>
  <view class="projects-filter" style="opacity: {{ filterOpacity }};">
    <view class="filter your-projects {{ mode === 'your' ? 'active' : '' }}" @tap.stop="pickMode('your')">{{ lang.yourProjects }}</view>
    <view class="filter starred-projects {{ mode === 'starred' ? 'active' : '' }}" @tap.stop="pickMode('starred')">{{ lang.starredProjects }}</view>
  </view>
  <view class="projects-lists">
    <repeat for="{{ projects }}" key="index" index="index" item="item">
      <navigator url="/projects/detail?pid={{ item.id }}" hover-class="none">
        <view class="project-index-item-wrapper">
          <projectAvatar :item.sync="item"></projectAvatar>
          <projectIndexItem :item.sync="item"></projectIndexItem>
        </view>
      </navigator>
    </repeat>
  </view>
  <view class="no-more" wx:if="{{ projects.length > 0 && noMore }}">{{ lang.noMore }}</view>
</view>
</template>
<script>
import wepy from 'wepy'
import BasePage from './base'
import moment from 'moment'
import { isEmpty, extend } from '../utils/validate'
import LetterAvatar from '../utils/letter-avatar'
import ProjectsService from '../services/projects'
import LoginModal from '../components/loginModal'
import ProjectIndexItem from '../components/projectIndexItem'
import ProjectAvatar from '../components/projectAvatar'

export default class IndexPage extends BasePage {
  data = {
    mode: 'your',
    projects: [],
    filterOpacity: 1,
    tmpOpacity: 1,
    ...this.def
  }

  components = {
    loginModal: LoginModal,
    projectIndexItem: ProjectIndexItem,
    projectAvatar: ProjectAvatar
  }

  async onLoad() {
    await this.userLogin()
    this.setLang()
    this.hasPagination = true
    if (this.checkLoginStatus()) {
      this.extraParams = {
        page: 1,
        per_page: 20
      }
      let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
      let [projects] = await this.loadData(serviceFn, this.extraParams, this.mapProjects, this.projects)
      this.projects = projects
    }
    this.loaded()
  }

  onShow() {
    this.projects = this.projects.map((item) => {
      item.isDefault = item.id === wepy.getStorageSync('DEFAULT_PROJECT_ID')
      return item
    })
    this.$apply()
  }

  onPageScroll(e) {
    this.setOpacity(100, e.scrollTop)
  }

  setOpacity(limit, scrollTop) {
    if (scrollTop <= 0) {
      this.tmpOpacity = 1
    } else if (scrollTop > limit) {
      this.tmpOpacity = 0
    } else {
      this.tmpOpacity = ((limit - scrollTop) / limit).toFixed(1)
    }
    if (this.filterOpacity !== this.tmpOpacity) {
      this.filterOpacity = this.tmpOpacity
      this.$apply()
      // console.log(this.filterOpacity)
    }
  }

  setLang() {
    const t = wepy.i18n.translate
    this.lang.noMore = t('common-no-more')
    this.lang.yourProjects = t('idx-your-projects')
    this.lang.starredProjects = t('idx-starred-projects')
    this.$apply()
  }

  async onTabItemTap() {
    // 仅当返回首页时且在其他页面首次登录后刷新数据
    if (this.checkLoginStatus() && this.projects.length === 0) {
      this.extraParams = {
        page: 1,
        per_page: 20
      }
      let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
      let [projects] = await this.loadData(serviceFn, this.extraParams, this.mapProjects, this.projects)
      this.projects = projects
    }
    this.loaded()
  }

  mapProjects(item) {
    const t = wepy.i18n.translate
    item.bgColor = LetterAvatar(item.name)
    item.upperFirstLetter = item.name[0].toUpperCase()
    item.lastUpdated = t('idx-last-updated', {
      date: moment(item.last_activity_at).fromNow()
    })
    item.isDefault = item.id === wepy.getStorageSync('DEFAULT_PROJECT_ID')
    return item
  }

  async onReachBottom() {
    if (!this.noMore) {
      let params = extend(this.extraParams, {
        page: this.nextPage
      })
      let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
      let [projects] = await this.loadData(serviceFn, params, this.mapProjects, this.projects)
      this.projects = projects
    }
    this.loaded()
  }

  methods = {
    async pickMode(mode) {
      this.mode = mode
      this.extraParams = {
        page: 1,
        per_page: 20
      }
      if (mode === 'starred') {
        this.extraParams['starred'] = true
      } else {
        delete this.extraParams.starred
      }
      let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
      let [projects] = await this.loadData(serviceFn, this.extraParams, this.mapProjects, this.projects)
      this.projects = projects
      this.loaded()
    }
  }

  events = {
    'user-logined': async (user) => {
      if (!isEmpty(user)) {
        this.currentUser = user
        this.extraParams = {
          page: 1,
          per_page: 20
        }
        let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
        let [projects] = await this.loadData(serviceFn, this.extraParams, this.mapProjects, this.projects)
        this.projects = projects
      }
      this.loaded()
    }
  }
}
</script>
