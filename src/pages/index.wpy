<style lang='scss'>
.container {
  box-sizing: border-box;
  width: 100%;
  padding: 32rpx;
}

.projects-wrapper {
  padding-right: 0;
}
</style>
<template>
<loginModal wx:if="{{ !currentUser || !currentUser.id }}"></loginModal>
<view class="container projects-wrapper" wx:else>
  <repeat for="{{ projects }}" key="index" index="index" item="item">
    <projectIndexItem :item.sync="item"></projectIndexItem>
  </repeat>
</view>
</template>
<script>
import wepy from 'wepy'
import BasePage from './base'
import moment from 'moment'
import { isEmpty, extend } from '../utils/validate'
import ProjectsService from '../services/projects'
import LoginModal from '../components/loginModal'
import ProjectIndexItem from '../components/projectIndexItem'
import LetterAvatar from '../utils/letter-avatar'

export default class IndexPage extends BasePage {
  data = {
    projects: [],
    ...this.def
  }

  components = {
    loginModal: LoginModal,
    projectIndexItem: ProjectIndexItem
  }

  async onLoad() {
    this.userLogin()
    this.hasPagination = true
    if (this.currentUser && this.currentUser.id) {
      this.extraParams = {
        page: 1,
        per_page: 20
      }
      let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
      this.projects = await this.loadData(this.projects, serviceFn, this.mapProjects, this.extraParams)
    }
    this.loaded()
  }

  async onTabItemTap() {
    // 仅当返回首页时且在其他页面首次登录后刷新数据
    if (isEmpty(this.currentUser)) {
      this.userLogin()
      if (this.currentUser && this.currentUser.id) {
        this.extraParams = {
          page: 1,
          per_page: 20
        }
        let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
        this.projects = await this.loadData(this.projects, serviceFn, this.mapProjects, this.extraParams)
      }
      this.loaded()
    }
  }

  mapProjects(item) {
    const t = wepy.i18n.translate
    item.upperFirstLetter = item.name[0].toUpperCase()
    item.bgColor = LetterAvatar(item.name)
    item.lastUpdated = t('idx-last-updated', {
      date: moment(item.last_activity_at).fromNow()
    })
    return item
  }

  async onReachBottom() {
    if (!this.noMore) {
      let params = extend(this.extraParams, {
        page: this.nextPage
      })
      let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
      this.projects = await this.loadData(this.projects, serviceFn, this.mapProjects, params)
    }
    this.loaded()
  }

  events = {
    'user-logined': async (user) => {
      if (!isEmpty(user)) {
        this.currentUser = user
        this.extraParams = {
          page: 1,
          per_page: 20
        }
        let serviceFn = ProjectsService.getUserProjects.bind(ProjectsService)
        this.projects = await this.loadData(this.projects, serviceFn, this.mapProjects, this.extraParams)
      }
      this.loaded()
    }
  }
}
</script>
