<style lang='scss'>
.container {
  width: 100%;
  box-sizing: border-box;

  .projects-filter {
    padding: 24rpx 32rpx;
    font-size: 28rpx;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    justify-content: space-between;
    background-color: white;
    box-shadow: 2rpx 2rpx 10rpx #cccccc;
    width: 100%;
    box-sizing: border-box;
    position: fixed;
    top: 0;
    left: 0;

    .filter {
      flex-shrink: 1;
      text-align: center;
      border: 1px solid #cccccc;
      padding: 10rpx 20rpx;
      color: #4b4b4b;
      background-color: white;
      border-radius: 8rpx 0 0 8rpx;
      height: 64rpx;
      box-sizing: border-box;
      font-weight: bold;

      &.active {
        background-color: #292961;
        border-color: #292961;
        color: white;
      }

      &.only {
        border-radius: 8rpx;
        border: 1px solid #cccccc;
      }
    }

    .search-input-wrapper {
      flex-grow: 1;
      border: 1px solid #cccccc;
      border-left: none;
      border-radius: 0 8rpx 8rpx 0;
      height: 64rpx;
      box-sizing: border-box;
      display: inline-flex;
      align-items: center;
      padding-right: 24rpx;

      input {
        padding: 10rpx 24rpx;
        min-height: 100%;
        height: 100%;
        width: 100%;
        box-sizing: border-box;
      }

      .clear-btn {
          width: 28rpx;
          height: 28rpx;
      }
    }
  }

  .modes-bg {
    position: fixed;
    top: 112rpx;
    left: 0;
    z-index: 1;
    opacity: 0.8;
    width: 100vw;
    height: 100vh;
    box-sizing: border-box;
    background-color: #e3e3e3;
  }

  .modes {
    font-size: 28rpx;
    display: flex;
    flex-flow: row nowrap;
    align-items: flex-start;
    justify-content: space-between;
    background-color: white;
    box-shadow: 0 4rpx 10rpx -4rpx #cccccc;
    width: 100%;
    box-sizing: border-box;
    position: fixed;
    top: 112rpx;
    left: 0;
    z-index: 10;

    .mode-item {
      flex: 1;
      text-align: center;
      padding: 24rpx 0;
      color: #6b6b6b;
      background-color: white;

      &.active {
        background-color: #292961;
        border-color: #292961;
        color: white;
      }
    }
  }

  .projects-lists {
    margin-top: 140rpx;
    padding: 0 32rpx;

    .project-index-item-wrapper {
      width: 100%;
      display: flex;
      flex-flow: row nowrap;
      align-items: flex-start;
      padding: 24rpx 0;
    }
  }

  .no-more {
    margin: 30rpx 0;
    color: #6b6b6b;
    font-size: 28rpx;
    text-align: center;
    box-sizing: border-box;
    width: 100%;
    padding-right: 32rpx;
  }
}
</style>
<template>
<view class="container">
  <view class="projects-filter">
    <view class="filter {{ modesFilterOn ? 'active' : '' }}" @tap.stop="toggleModes">{{ modeTitle }}</view>
    <view class="search-input-wrapper">
      <input value="{{ keyword }}" placeholder="{{ lang.searchPh }}" cursor-spacing="20" maxlength="30" confirm-type="search" bindinput="setKeyword" bindconfirm="searchProjects" />
      <image class="clear-btn" src="/images/clear.png" mode="aspectFit" @tap="clearSearch" wx:if="{{ keyword && keyword.length > 0 }}"></image>
    </view>
  </view>
  <view class="modes-wrapper" wx:if="{{ modesFilterOn }}" catchtouchmove="ture">
    <view class="modes-bg" @tap.stop="toggleModes"></view>
    <view class="modes">
      <view class="mode-item {{ mode === 'your' ? 'active' : '' }}" @tap.stop="pickMode('your')">
        <view class="name">{{ lang.yourProjects }}</view>
      </view>
      <view class="mode-item {{ mode === 'starred' ? 'active' : '' }}" @tap.stop="pickMode('starred')">
        <view class="name">{{ lang.starredProjects }}</view>
      </view>
      <view class="mode-item {{ mode === 'public' ? 'active' : '' }}" @tap.stop="pickMode('public')">
        <view class="name">{{ lang.publicProjects }}</view>
      </view>
    </view>
  </view>
  <view class="projects-lists">
    <repeat for="{{ projects }}" key="index" index="index" item="item">
      <navigator url="/projects/detail?pid={{ item.id }}" hover-class="none">
        <view class="project-index-item-wrapper">
          <projectAvatar :item.sync="item"></projectAvatar>
          <projectIndexItem :item.sync="item"></projectIndexItem>
        </view>
      </navigator>
    </repeat>
  </view>
  <view class="no-more" wx:if="{{ projects.length > 0 && noMore }}">{{ lang.noMore }}</view>
</view>
</template>
<script>
import wepy from 'wepy'
import BasePage from './base'
import moment from 'moment'
import { isEmpty, extend } from '../utils/validate'
import LetterAvatar from '../utils/letter-avatar'
import ProjectsService from '../services/projects'
import LoginModal from '../components/loginModal'
import ProjectIndexItem from '../components/projectIndexItem'
import ProjectAvatar from '../components/projectAvatar'

export default class IndexPage extends BasePage {
  data = {
    mode: 'public',
    modeTitle: '',
    projects: [],
    defaultProject: {},
    logined: false,
    modesFilterOn: false,
    checkLoad: false,
    keyword: '',
    ...this.def
  }

  config = {
    enablePullDownRefresh: true
  }

  components = {
    loginModal: LoginModal,
    projectIndexItem: ProjectIndexItem,
    projectAvatar: ProjectAvatar
  }

  async onLoad() {
    await this.userLogin()
    this.setLang()
    this.hasPagination = true
    this.projects = []
    this.logined = this.checkLoginStatus()
    this.extraParams = {
      page: 1,
      per_page: 50
    }
    this.initData()
    if (!this.logined) {
      this.keyword = 'gitlab'
      this.extraParams['search'] = this.keyword
    }
    await this.fetchData()
    this.loaded()
  }

  async onTabItemTap(e) {
    if (this.checkLoad) {
      this.projects = []
      this.initData()
      await this.fetchData()
      this.loaded()
    }
  }

  onShow() {
    this.checkLoad = this.logined !== this.checkLoginStatus()
    this.logined = this.checkLoginStatus()
    if (!this.logined) {
      this.keyword = 'gitlab'
      this.extraParams['search'] = this.keyword
    }
    this.defaultProject = wepy.getStorageSync('DEFAULT_PROJECT')
    this.projects = this.projects.map((item) => {
      item.isDefault = item.id === this.defaultProject.id
      return item
    })
    this.$apply()
  }

  async onPullDownRefresh() {
    this.projects = []
    this.initData()
    await this.fetchData()
    wx.stopPullDownRefresh()
    this.loaded()
  }

  initData() {
    if (this.logined) {
      this.mode = 'your'
      this.modeTitle = this.lang.yourProjects
      this.extraParams['needAuth'] = true
      this.extraParams['membership'] = true
    } else {
      this.mode = 'public'
      this.modeTitle = this.lang.publicProjects
      delete this.extraParams.starred
      delete this.extraParams.visibility
      this.extraParams['needAuth'] = false
      this.extraParams['membership'] = false
    }
  }

  async fetchData() {
    let serviceFn = ProjectsService.getProjects.bind(ProjectsService)
    let [projects] = await this.loadData(serviceFn, this.extraParams, this.mapProjects, this.projects)
    this.projects = projects
  }

  setLang() {
    const t = wepy.i18n.translate
    this.lang.noMore = t('common-no-more')
    this.lang.yourProjects = t('idx-your-projects')
    this.lang.starredProjects = t('idx-starred-projects')
    this.lang.publicProjects = t('idx-public-projects')
    this.lang.searchPh = t('idx-search-ph')
    this.$apply()
  }

  mapProjects(item) {
    const t = wepy.i18n.translate
    const defaultProj = wepy.getStorageSync('DEFAULT_PROJECT')
    item.bgColor = LetterAvatar(item.name)
    item.upperFirstLetter = item.name[0].toUpperCase()
    item.lastUpdated = t('idx-last-updated', {
      date: moment(item.last_activity_at).fromNow()
    })
    item.isDefault = (item.id === defaultProj.id)
    return item
  }

  async onReachBottom() {
    if (!this.noMore) {
      this.extraParams = extend(this.extraParams, {
        page: this.nextPage
      })
      this.initData()
      await this.fetchData()
    }
    this.loaded()
  }

  methods = {
    toggleModes() {
      if (this.checkLoginStatus()) {
        this.modesFilterOn = !this.modesFilterOn
        this.$apply()
      }
    },
    async pickMode(mode) {
      this.mode = mode
      this.modesFilterOn = !this.modesFilterOn
      this.extraParams = {
        page: 1,
        per_page: 50
      }
      this.projects = []
      if (mode === 'public') {
        this.modeTitle = this.lang.publicProjects
        delete this.extraParams.starred
        delete this.extraParams.visibility
        this.extraParams['needAuth'] = false
        this.extraParams['membership'] = false
      } else if (mode === 'starred') {
        this.modeTitle = this.lang.starredProjects
        this.extraParams['starred'] = true
        this.extraParams['needAuth'] = true
        this.extraParams['membership'] = true
      } else {
        this.modeTitle = this.lang.yourProjects
        delete this.extraParams.starred
        this.extraParams['needAuth'] = true
        this.extraParams['membership'] = true
      }

      let serviceFn = ProjectsService.getProjects.bind(ProjectsService)
      let [projects] = await this.loadData(serviceFn, this.extraParams, this.mapProjects, this.projects)
      this.projects = projects

      this.loaded()
    },

    setKeyword(e) {
      if (e.detail.value) {
        this.keyword = e.detail.value
      }
    },

    async searchProjects(e) {
      if (!isEmpty(this.keyword)) {
        this.projects = []
        this.extraParams['search'] = this.keyword
        this.initData()
        await this.fetchData()
        this.loaded()
      }
    },

    async clearSearch() {
      this.projects = []
      this.keyword = ''
      delete this.extraParams.search
      this.initData()
      await this.fetchData()
      this.loaded()
    }
  }

  events = {
    'user-logined': async (user) => {
      if (!isEmpty(user)) {
        this.currentUser = user
        this.projects = []
        this.extraParams = {
          page: 1,
          per_page: 50
        }
        this.initData()
        await this.fetchData()
      }
      this.loaded()
    }
  }
}
</script>
