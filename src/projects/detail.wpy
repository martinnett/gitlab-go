<style lang='scss'>
@import './towxml/style/main.wxss';
@import './towxml/style/theme/light.wxss';

.container {
  width: 100%;
  padding: 32rpx 32rpx 0 32rpx;

  .project-info {
    width: 100%;
    padding-bottom: 32rpx;
    background-color: white;

    .row {
      display: flex;
      flex-flow: row nowrap;
      align-items: flex-start;

      .project-basic {
        margin-left: 24rpx;

        .name {
          font-size: 30rpx;
          font-weight: bold;
        }

        .desc {
          font-size: 26rpx;
          color: #5b5b5b;
        }
      }
    }

    .statistics {
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
      justify-content: center;
      margin-top: 40rpx;

      .item {
        flex: 1;
        text-align: left;
        font-size: 30rpx;

        .value {
          font-weight: bold;
        }

        .label {
          font-size: 28rpx;
          color: #3b3b3b;
        }
      }
    }
  }

  .project-readme {
    font-size: 28rpx;
  }
}

.no-readme {
  font-size: 32rpx;
  font-weight: bold;
  margin-top: 60rpx;
  text-align: center;
}
</style>
<template lang="wxml">
<view class="container projects-detail">
  <view class="project-info">
    <view class="row">
      <projectAvatar :item.sync="project"></projectAvatar>
      <view class="project-basic">
        <view class="name">
          {{ project.name_with_namespace }} <image wx:if="{{ project.visibility === 'private' }}" class="icon-image icon-image-small" src="/images/lock.png"></image>
        </view>
        <view class="desc">
          {{ project.description }}
        </view>
      </view>
    </view>
    <view class="statistics" wx:if="{{ project && project.statistics }}">
      <view class="item stars">
        <view class="value">{{ project.star_count }}</view>
        <view class="label">{{ lang.stars }}</view>
      </view>
      <view class="item issues">
        <view class="value">{{ project.open_issues_count }}</view>
        <view class="label">{{ lang.issues }}</view>
      </view>
      <view class="item commits">
        <view class="value">{{ project.statistics.commit_count }}</view>
        <view class="label">{{ lang.commits }}</view>
      </view>
    </view>
  </view>
</view>
<view class="hr"></view>
<view wx:if="{{ project.readmeRAW }}">
  <import src="./towxml/entry.wxml"/>
  <template is="entry" data="{{...project.readmeRAW}}"/>
</view>
<view class="no-readme" wx:if="{{ noReadme }}">
  {{ lang.noReadme }}
</view>
</template>
<script>
import wepy from 'wepy'
import BasePage from '../pages/base'
import { isEmpty } from '../utils/validate'
import LetterAvatar from '../utils/letter-avatar'
import ProjectAvatar from '../components/projectAvatar'
import ProjectsService from '../services/projects'
export default class ProjectsDetail extends BasePage {
  data = {
    lang: {},
    project: {},
    noReadme: false,
    ...this.def
  }

  components = {
    projectAvatar: ProjectAvatar
  }

  async onLoad(options) {
    await this.userLogin()
    this.setLang()
    this.hasPagination = true
    let serviceFn = ProjectsService.getProjectDetail.bind(ProjectsService)
    let [project, readme] = await Promise.all([this.loadData(serviceFn, options.pid, null), ProjectsService.getProjectReadme(options.pid)])
    if (!isEmpty(project) && project.name) {
      project.bgColor = LetterAvatar(project.name)
      project.upperFirstLetter = project.name[0].toUpperCase()
    }
    if (readme && readme.status && readme.data) {
      this.noReadme = false
      let readmeRAW = wepy.towxml.toJson(readme.data, 'markdown')
      readmeRAW.theme = 'light'
      project.readmeRAW = readmeRAW
    } else {
      this.noReadme = true
    }
    this.project = project
    this.loaded()
  }

  setLang() {
    const t = wepy.i18n.translate
    this.lang.stars = t('proj-detail-stars')
    this.lang.issues = t('proj-detail-issues')
    this.lang.commits = t('proj-detail-commits')
    this.lang.noReadme = t('proj-detail-noreadme')
    this.$apply()
  }
}
</script>
